substitutions:
  name: device-name
  friendly_name: "Device Name"
  board: sonoff_basic
  
  password: !secret password
  
  wifi_ssid: !secret wifi_ssid
  wifi_pswd: !secret wifi_password
  
  ip: !secret ip_device-name
  gateway: !secret gateway
  subnet: !secret subnet
  
  # Optional
  # wifi_ssid2: !secret wifi_ssid2
  # wifi_pswd2: !secret wifi_password2



esphome:
  name: ${name}

esp8266:
  board: ${board}

logger:
api:
ota:
  password: ${password}


wifi:
  networks:
  - ssid: ${wifi_ssid}
    password: ${wifi_pswd}
  # Optional sencondary SSID
  # - ssid: ${wifi_ssid}
  #   password: ${wifi_pswd}
  
  # Optional manual IP
  manual_ip:
    static_ip: ${ip}
    gateway: ${gateway}
    subnet: ${subnet}
  # Optional Fallback SSID
  ap:
    ssid: "${friendly_name} Fallback"
    password: ${password}
captive_portal:

# Sonoff Button
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${friendly_name} Button"
    on_press:
      - switch.toggle: relay

# Sonoff Relay
switch:
  - platform: gpio
    name: "${friendly_name}"
    pin: GPIO12
    id: relay

# Sonoff Status LED
status_led:
  pin:
    number: GPIO13
    inverted: yes

# Enable Web Server
web_server:
  port: 80
  auth:
    username: ${name}
    password: ${password}
  

# Restart Button
button:
  - platform: restart
    name: "${friendly_name} Restart"

# Sensors
sensor:
  - platform: wifi_signal
    name: "${friendly_name} RSSI"
    update_interval: 120s
    
  - platform: adc
    pin: VCC
    name: "${friendly_name} VCC Voltage"
    
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
              
text_sensor:
  - platform: template
    name: "${friendly_name} Uptime Human Readable"
    id: uptime_human
    icon: mdi:clock-start
    
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP"
      icon: "mdi:ip-network"
    ssid:
      name: "${friendly_name} SSID"
      icon: "mdi:wifi-strength-4"
      
