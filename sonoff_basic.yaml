substitutions:
  board: esp01_1m
  name: device-name
  device_name: "Device Name"
  ip: 192.168.1.2


api:
captive_portal:
logger:
ota:
  password: !secret password

wifi:
  power_save_mode: none
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  # uncomment the next 2 lines if you have a second wifi network
#  - ssid: !secret wifi_ssid_2
#    password: !secret wifi_password_2
  # Optional manual IP
  manual_ip:
    static_ip: "${ip}"
    gateway: !secret gateway
    subnet: !secret subnet
  ap:
    ssid: "${device_name} Fallback"
    password: !secret password

web_server:
  port: 80
  auth:
    username: admin
    password: !secret password

sensor:
  - platform: wifi_signal
    name: "${device_name} RSSI"
    update_interval: 120s
  - platform: adc
    pin: VCC
    name: "${device_name} VCC Voltage"
  - platform: uptime
    name: ${device_name} Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();


text_sensor:
  - platform: template
    name: "${device_name} Uptime Human Readable"
    id: uptime_human
    icon: mdi:clock-start
  - platform: wifi_info
    ip_address:
      name: "${device_name} IP"
      icon: "mdi:ip-network"
    ssid:
      name: "${device_name} SSID"
      icon: "mdi:wifi-strength-4"
button:
  - platform: restart
    name: "${device_name} Restart"


# Sonoff Basic
esphome:
  name: "${name}"
esp8266:
  board: "${board}"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "${device_name} Button"
    on_press:
      - switch.toggle: relay

switch:
  - platform: gpio
    name: "${device_name}"
    pin: GPIO12
    id: relay

status_led:
  pin:
    number: GPIO13
    inverted: yes
